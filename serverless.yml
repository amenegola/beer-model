service: beer-model
# app and org for use with dashboard.serverless.com
app: beer-model-app
org: menegolaws

frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  stage: ${env:STAGE}
  region: ${env:REGION}
  lambdaHashingVersion: 20201221
  logs:
    httpApi: true
  environment:
    IS_DEBUG: ${env:IS_DEBUG}
    API_KEY: ${env:API_KEY}
    BUCKET_MODEL_ARTIFACTS: ${env:BUCKET_MODEL_ARTIFACTS}
    MODEL_FILENAME: ${env:MODEL_FILENAME}

functions:
  app:
    handler: main.handler
    events:
      - httpApi:
          path: '*'

custom:
  pythonRequirements:
    dockerizePip: true
    useDownloadCache: false
    slim: true
    zip: true

package:
  exclude:
    - node_modules/**
    - venv/**
    - .direnv/**
    - .serverless/**
    - .tox/**

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin



# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.py'
#    - '!exclude-me-dir/**'
#    - include-me.py
#    - include-me-dir/**


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2